[{"/Users/jamesakpan/Documents/workingIdeas/devebay/src/App.js":"1","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/Upload.js":"2","/Users/jamesakpan/Documents/workingIdeas/devebay/src/index.js":"3","/Users/jamesakpan/Documents/workingIdeas/devebay/src/firebase.js":"4","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/LoggedIn.js":"5","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/Navbar.js":"6","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/Page.js":"7","/Users/jamesakpan/Documents/workingIdeas/devebay/src/theme.js":"8","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/UserPage.js":"9","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/Footer.js":"10","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/DetailCard.js":"11","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/IndividualItem.js":"12","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/NLoggedin.js":"13","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/ItemCard.js":"14"},{"size":1658,"mtime":1613951783464,"results":"15","hashOfConfig":"16"},{"size":38107,"mtime":1613951783471,"results":"17","hashOfConfig":"16"},{"size":726,"mtime":1610313141795,"results":"18","hashOfConfig":"16"},{"size":673,"mtime":1613951783474,"results":"19","hashOfConfig":"16"},{"size":8030,"mtime":1613951783470,"results":"20","hashOfConfig":"16"},{"size":2179,"mtime":1616336008336,"results":"21","hashOfConfig":"16"},{"size":595,"mtime":1614574630114,"results":"22","hashOfConfig":"16"},{"size":2517,"mtime":1616336411848,"results":"23","hashOfConfig":"16"},{"size":6802,"mtime":1613951783472,"results":"24","hashOfConfig":"16"},{"size":1907,"mtime":1616338250747,"results":"25","hashOfConfig":"16"},{"size":705,"mtime":1615819101110,"results":"26","hashOfConfig":"16"},{"size":11693,"mtime":1613951783469,"results":"27","hashOfConfig":"16"},{"size":7660,"mtime":1616336941541,"results":"28","hashOfConfig":"16"},{"size":1659,"mtime":1613951783466,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"2lzdkn",{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jamesakpan/Documents/workingIdeas/devebay/src/App.js",["67","68"],"import { \n  Box\n} from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Page from './Components/Page';\nimport NLoggedIn from './Pages/NLoggedin';\nimport LoggedIn from './Pages/LoggedIn';\nimport {auth} from './firebase';\nimport Upload from './Pages/Upload';\nimport IndividualItem from './Pages/IndividualItem';\nimport UserPage from './Pages/UserPage';\n\nconst App = () => {\n\n  const [userLoggedIn, setUserLoggedIn] = React.useState(false);\n  auth().onAuthStateChanged((user) => {\n    if(user) { \n      setUserLoggedIn(true);\n      setUserData(user)\n    }\n  });\n  let [userData, setUserData] = useState();\n  return (\n    userLoggedIn ? \n    <BrowserRouter>\n      <Switch> \n        <Route exact path='/' component={() => { \n          return ( \n            <LoggedIn />\n          )\n        }} /> \n        <Route \n          path='/upload'\n          component={() => {\n            return ( \n              <Upload userData={userData}/>\n            )\n          }}\n        />\n        <Route \n          path='/i/:productId'\n          component={() => {\n            return ( \n              <IndividualItem userData={userData}/>\n            )\n          }}\n        />\n        <Route \n          path='/u/:username'\n          component={() => {\n            return ( \n              <UserPage/>\n            )\n          }}\n        />\n      </Switch>\n    </BrowserRouter>\n    : \n    <BrowserRouter> \n      <Switch> \n        <Route path='/' component={() => {\n          return (\n            <NLoggedIn />\n          )\n        }} /> \n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n",["69","70"],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/Upload.js",["71","72","73"],"import React, { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Text,\n  Flex,\n  Heading,\n  Container,\n  Image,\n  GridItem,\n  CircularProgress,\n  Code,\n  Box,\n  Input,\n  Icon,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Textarea,\n  Select,\n  InputLeftElement,\n  InputGroup,\n  Button,\n  Avatar,\n  Link,\n  useClipboard,\n} from '@chakra-ui/react';\nimport {Redirect} from 'react-router-dom';\nimport Page from '../Components/Page';\nimport thumbsUp from '../Assets/thumbsUp.png';\nimport { FcAddImage } from 'react-icons/fc';\nimport firebase, { auth, firestore, firebaseStorageRef } from '../firebase';\nimport { AiOutlineDollar, AiOutlineLink } from 'react-icons/ai';\nimport { BsBoxArrowUp } from 'react-icons/bs';\nimport { FiExternalLink } from 'react-icons/fi';\nimport { BiWorld, BiArrowBack } from 'react-icons/bi';\nimport {GiCheckeredFlag} from 'react-icons/gi';\nimport { CgArrowRightO } from 'react-icons/cg';\n\nconst Upload = (userData) => {\n  //auth data\n\n  useEffect(() => {\n    let date = new Date();\n    let currentUser = auth().currentUser;\n    setUserCredentials({\n      ...userCredentials,\n      email: currentUser.email,\n      uid: currentUser.uid,\n    });\n\n    firestore\n      .collection('users')\n      .doc(currentUser.email)\n      .get()\n      .then((data) => {\n        setUserCredentials({\n          ...userCredentials,\n          userName: data.data().username,\n        });\n        setItemData({\n          ...itemData,\n          owner: data.data().username,\n          id: new Date().getTime(),\n          ownerId: currentUser.uid,\n          date: {\n            ...date,\n            month: date.getMonth() + 1,\n            day: date.getDate(),\n            year: date.getFullYear(),\n          },\n          ownerImg: currentUser.photoURL,\n        });\n      });\n  }, []);\n\n  //hooks\n  let [isSubmitting, setIsSubmitting] = useState(false);\n  let [itemUploadFinish, setItemUploadFinish] = useState(false);\n  let [imageFile, setImageFile] = useState(null);\n  let [seePreview, setSeePreview] = useState(false);\n  let [uploadedImg, setUploadedImg] = useState(false);\n  let [showImgErr, setShowImgError] = useState(false);\n  let [userCredentials, setUserCredentials] = useState({\n    userName: '',\n    email: '',\n    uid: '',\n  });\n  let [countries, setCountries] = useState([]);\n  let [isShippingWorldWide, setIsShippingWorldWide] = useState(true);\n  let [itemImg, setItemImg] = useState('');\n  const [itemData, setItemData] = useState({\n    owner: '',\n    ownerId: '',\n    date: { month: 0, day: 0, year: 0 },\n    id: 0,\n    itemName: '',\n    itemPrice: 0,\n    metaDesc: '',\n    fullDesc: '',\n    wwShipping: isShippingWorldWide,\n    imageUrl: itemImg,\n    isFree: '',\n    ownerImg: '',\n    available: true,\n  });\n\n  //functions\n  //PUSH ITEM TO FIREBASE\n  const pushItemToFirebase = () => {\n    let imgRef = firebaseStorageRef\n      .child(\n        `/itemImages/${itemData.owner}-${itemData.itemName}-${itemData.id}`\n      )\n      .put(imageFile);\n    setIsSubmitting(true);\n    imgRef.on(\n      'state_changed',\n      (snapshot) => {},\n      (error) => {\n        console.log(error);\n      },\n      () => {\n        imgRef.snapshot.ref.getDownloadURL().then((url) => {\n          setItemData({ ...itemData, imageUrl: url });\n          let data = {\n            name: itemData.itemName,\n            price: parseInt(itemData.itemPrice > 0 ? itemData.itemPrice : 0),\n            metaDesc: itemData.metaDesc,\n            fullDesc: itemData.fullDesc,\n            countries: countries.length > 0 ? countries : 'none',\n            wwShipping: itemData.wwShipping,\n            ownerData: {\n              owner: itemData.owner,\n              ownerId: itemData.ownerId,\n              ownerImg: itemData.ownerImg,\n            },\n            id: itemData.id,\n            date: itemData.date,\n            available: itemData.available,\n            itemImg: url,\n            views: 0,\n            order: []\n          };\n          firestore.collection('items')\n          .doc(itemData.id.toString())\n          .set({...data})\n          .then((d) => { \n            setItemUploadFinish(true);\n          })\n        })\n      }\n    );\n  };\n  //remove country from state\n  const RemoveCountry = (e) => {\n    let itemName = e.target.closest('button').id;\n    setCountries((oldArr) => oldArr.filter((name) => name !== itemName));\n  };\n\n  //handleImage change\n  const imageChange = (e) => {\n    setShowImgError(false);\n    setUploadedImg(true);\n    let target = e.target.files[0];\n    if (target) {\n      let url = URL.createObjectURL(target);\n      setItemImg(url);\n      setImageFile(target);\n    }\n  };\n  //handle data change\n  const ItemDataUpdate = (target) => {\n    switch (target.target.dataset.inputtype) {\n      case 'itemName':\n        setItemData({ ...itemData, itemName: target.target.value });\n        break;\n      case 'itemPrice':\n        setItemData({ ...itemData, itemPrice: target.target.value });\n        break;\n      case 'itemMetaDesc':\n        setItemData({ ...itemData, metaDesc: target.target.value });\n        break;\n      case 'fullDesc':\n        setItemData({ ...itemData, fullDesc: target.target.value });\n        break;\n      default:\n        return;\n    }\n  };\n\n  //edit shipping status\n  const handleShippingStatus = (status) => {\n    const clearAllCountries = () => {\n      setCountries([]);\n    };\n    status ? clearAllCountries() : console.log('nothing here');\n    setIsShippingWorldWide(status);\n    setItemData({ ...itemData, wwShipping: status });\n  };\n\n  //handle form submittion.\n  const formSubmitted = (e) => {\n    e.preventDefault();\n\n    !uploadedImg ? setShowImgError(true) : setShowImgError(false);\n    setSeePreview(true);\n  };\n\n  let {hasCopied, onCopy} = useClipboard(`${window.location.host}/i/${itemData.id}`);\n  return ( \n    <Page>\n      <Grid\n        display={seePreview ? 'none' : 'grid'}\n        bg='secondary.200'\n        px='5'\n        py='20'\n        borderRadius='13px'\n        templateColumns='repeat(2, 1fr)'\n      >\n        <GridItem>\n          <Container m='0'>\n            <Heading fontSize='4rem' mb={4} color='#fff'>\n              Upload Your Item\n            </Heading>\n            <Text color='#fff' lineHeight='1.7rem'>\n              Uploading on Devebay means that you are sure and willing to see\n              your item to an intrested buyer. Please take care to fill the\n              information below- it would help give your potential buyer a good\n              idea of what your product looks like and your terms- Cheers!\n            </Text>\n          </Container>\n        </GridItem>\n        <GridItem>\n          <Flex justifyContent='center' alignContent='center'>\n            <Image transform='scale(1.4)' w='50%' src={thumbsUp} />\n          </Flex>\n        </GridItem>\n      </Grid>\n\n      <Grid\n        display={seePreview ? 'none' : 'grid'}\n        borderRadius='13px'\n        mt={5}\n        p='5'\n        templateColumns='6fr 5fr'\n        columnGap='5'\n      >\n        <Box>\n          <label>\n            <Tag\n              cursor='pointer'\n              fontWeight='bold'\n              bg='secondary.200'\n              color='#fff'\n              py='4'\n              px='3'\n              mb='7'\n              fontSize='1rem'\n              textTransform='capitalize'\n            >\n              Upload an image of your item\n            </Tag>\n            <Flex\n              cursor='pointer'\n              borderRadius='9px'\n              border='2px dashed #264ABE'\n              align='center'\n              justify='center'\n              h='70%'\n              bg={`url(${itemImg})`}\n              bgPosition='left'\n              bgSize='cover'\n              bgRepeat='no-repeat'\n            >\n              <Box>\n                <Icon\n                  boxShadow='0px 0px 3px 9px #010b2808'\n                  borderRadius='200px'\n                  bg='#fff'\n                  p='3'\n                  display='block'\n                  color='#fff'\n                  m='0 auto'\n                  w='16'\n                  h='16'\n                  as={FcAddImage}\n                />\n              </Box>\n            </Flex>\n            <Input\n              display='none'\n              type='file'\n              name='file'\n              accept='image/*'\n              onChange={(event) => {\n                imageChange(event);\n              }}\n            />\n          </label>\n        </Box>\n        <Box>\n          <form onSubmit={formSubmitted} name='form'>\n            <FormControl\n              p='4'\n              borderRadius='9px'\n              border='2px dashed #B3C4F9'\n              isRequired\n            >\n              <FormLabel fontWeight='bold' color='secondary.200'>\n                Your item's name\n              </FormLabel>\n              <Input\n                data-inputtype='itemName'\n                onChange={(event) => {\n                  ItemDataUpdate(event);\n                }}\n                type='text'\n                fontWeight='bold'\n                color='#010B28'\n              />\n              <FormHelperText>\n                Your item's name should be short and precise 🙌🏽\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl\n              mt='8'\n              p='4'\n              borderRadius='9px'\n              border='2px dashed #B3C4F9'\n            >\n              <FormLabel fontWeight='bold' color='secondary.200'>\n                Your item's price. Leave empty for free items\n              </FormLabel>\n              <InputGroup>\n                <Input\n                  data-inputtype='itemPrice'\n                  onChange={(event) => {\n                    ItemDataUpdate(event);\n                  }}\n                  type='number'\n                  fontWeight='bold'\n                  color='#010B28'\n                />\n                <InputLeftElement\n                  fontSize='20px'\n                  children={<AiOutlineDollar />}\n                />\n              </InputGroup>\n              <FormHelperText>\n                Tell us your item's price in U.S Dollars - be as fair as\n                possible- we would appreciate your transperency.\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl\n              p='4'\n              mt='8'\n              borderRadius='9px'\n              border='2px dashed #B3C4F9'\n              isRequired\n            >\n              <FormLabel fontWeight='bold' color='secondary.200'>\n                Meta description\n              </FormLabel>\n              <Textarea\n                maxLength='100'\n                data-inputtype='itemMetaDesc'\n                onChange={(event) => {\n                  ItemDataUpdate(event);\n                }}\n                // fontWeight='bold'\n                color='#010B28'\n                type='text'\n              />\n              <FormHelperText>\n                A short description of what your item is- something catchy but\n                honest 😉{' '}\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl\n              p='4'\n              mt='8'\n              borderRadius='9px'\n              border='2px dashed #B3C4F9'\n              isRequired\n            >\n              <FormLabel fontWeight='bold' color='secondary.200'>\n                Full Description\n              </FormLabel>\n              <Textarea\n                data-inputtype='fullDesc'\n                onChange={(event) => {\n                  ItemDataUpdate(event);\n                }}\n                color='#010B28'\n                type='text'\n              />\n              <FormHelperText>\n                Tell us everything about your item. We love the story- your\n                buyer would too.{' '}\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl\n              p='4'\n              mt='8'\n              borderRadius='9px'\n              border='2px dashed #B3C4F9'\n              isRequired\n            >\n              <FormLabel fontWeight='bold' color='secondary.200'>\n                Are you willing to ship worldwide?\n              </FormLabel>\n              <Flex>\n                <Tag\n                  fontWeight='bold'\n                  bg='signals.success'\n                  color='#fff'\n                  py='2'\n                  px='8'\n                  fontSize='1rem'\n                  textTransform='capitalize'\n                  mr='5'\n                  onClick={() => {\n                    handleShippingStatus(true);\n                  }}\n                  cursor='pointer'\n                  opacity={isShippingWorldWide ? 1 : '0.3'}\n                >\n                  YES\n                </Tag>\n                <Tag\n                  onClick={() => {\n                    handleShippingStatus(false);\n                  }}\n                  cursor='pointer'\n                  fontWeight='bold'\n                  bg='signals.error'\n                  color='#fff'\n                  py='2'\n                  px='8'\n                  fontSize='1rem'\n                  textTransform='capitalize'\n                  mr='5'\n                  opacity={isShippingWorldWide ? 0.3 : 1}\n                >\n                  NO\n                </Tag>\n              </Flex>\n              <FormHelperText>\n                Developers live around the Globe, Let's know if you willing to\n                ship everywhere or just within a particular country/countries\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl\n              display={isShippingWorldWide ? 'none' : 'revert'}\n              p='4'\n              mt='8'\n              borderRadius='9px'\n              border='2px dashed #B3C4F9'\n            >\n              <FormLabel fontWeight='bold' color='secondary.200'>\n                Select a country you would be shipping within\n              </FormLabel>\n              <Select\n                fontWeight='bold'\n                placeholder='Select Country'\n                onChange={(event) => {\n                  setCountries((oldArr) => [...oldArr, event.target.value]);\n                }}\n              >\n                <option value='Afganistan'>Afghanistan</option>\n                <option value='Albania'>Albania</option>\n                <option value='Algeria'>Algeria</option>\n                <option value='American Samoa'>American Samoa</option>\n                <option value='Andorra'>Andorra</option>\n                <option value='Angola'>Angola</option>\n                <option value='Anguilla'>Anguilla</option>\n                <option value='Antigua & Barbuda'>Antigua & Barbuda</option>\n                <option value='Argentina'>Argentina</option>\n                <option value='Armenia'>Armenia</option>\n                <option value='Aruba'>Aruba</option>\n                <option value='Australia'>Australia</option>\n                <option value='Austria'>Austria</option>\n                <option value='Azerbaijan'>Azerbaijan</option>\n                <option value='Bahamas'>Bahamas</option>\n                <option value='Bahrain'>Bahrain</option>\n                <option value='Bangladesh'>Bangladesh</option>\n                <option value='Barbados'>Barbados</option>\n                <option value='Belarus'>Belarus</option>\n                <option value='Belgium'>Belgium</option>\n                <option value='Belize'>Belize</option>\n                <option value='Benin'>Benin</option>\n                <option value='Bermuda'>Bermuda</option>\n                <option value='Bhutan'>Bhutan</option>\n                <option value='Bolivia'>Bolivia</option>\n                <option value='Bonaire'>Bonaire</option>\n                <option value='Bosnia & Herzegovina'>\n                  Bosnia & Herzegovina\n                </option>\n                <option value='Botswana'>Botswana</option>\n                <option value='Brazil'>Brazil</option>\n                <option value='British Indian Ocean Ter'>\n                  British Indian Ocean Ter\n                </option>\n                <option value='Brunei'>Brunei</option>\n                <option value='Bulgaria'>Bulgaria</option>\n                <option value='Burkina Faso'>Burkina Faso</option>\n                <option value='Burundi'>Burundi</option>\n                <option value='Cambodia'>Cambodia</option>\n                <option value='Cameroon'>Cameroon</option>\n                <option value='Canada'>Canada</option>\n                <option value='Canary Islands'>Canary Islands</option>\n                <option value='Cape Verde'>Cape Verde</option>\n                <option value='Cayman Islands'>Cayman Islands</option>\n                <option value='Central African Republic'>\n                  Central African Republic\n                </option>\n                <option value='Chad'>Chad</option>\n                <option value='Channel Islands'>Channel Islands</option>\n                <option value='Chile'>Chile</option>\n                <option value='China'>China</option>\n                <option value='Christmas Island'>Christmas Island</option>\n                <option value='Cocos Island'>Cocos Island</option>\n                <option value='Colombia'>Colombia</option>\n                <option value='Comoros'>Comoros</option>\n                <option value='Congo'>Congo</option>\n                <option value='Cook Islands'>Cook Islands</option>\n                <option value='Costa Rica'>Costa Rica</option>\n                <option value='Cote DIvoire'>Cote DIvoire</option>\n                <option value='Croatia'>Croatia</option>\n                <option value='Cuba'>Cuba</option>\n                <option value='Curaco'>Curacao</option>\n                <option value='Cyprus'>Cyprus</option>\n                <option value='Czech Republic'>Czech Republic</option>\n                <option value='Denmark'>Denmark</option>\n                <option value='Djibouti'>Djibouti</option>\n                <option value='Dominica'>Dominica</option>\n                <option value='Dominican Republic'>Dominican Republic</option>\n                <option value='East Timor'>East Timor</option>\n                <option value='Ecuador'>Ecuador</option>\n                <option value='Egypt'>Egypt</option>\n                <option value='El Salvador'>El Salvador</option>\n                <option value='Equatorial Guinea'>Equatorial Guinea</option>\n                <option value='Eritrea'>Eritrea</option>\n                <option value='Estonia'>Estonia</option>\n                <option value='Ethiopia'>Ethiopia</option>\n                <option value='Falkland Islands'>Falkland Islands</option>\n                <option value='Faroe Islands'>Faroe Islands</option>\n                <option value='Fiji'>Fiji</option>\n                <option value='Finland'>Finland</option>\n                <option value='France'>France</option>\n                <option value='French Guiana'>French Guiana</option>\n                <option value='French Polynesia'>French Polynesia</option>\n                <option value='French Southern Ter'>French Southern Ter</option>\n                <option value='Gabon'>Gabon</option>\n                <option value='Gambia'>Gambia</option>\n                <option value='Georgia'>Georgia</option>\n                <option value='Germany'>Germany</option>\n                <option value='Ghana'>Ghana</option>\n                <option value='Gibraltar'>Gibraltar</option>\n                <option value='Great Britain'>Great Britain</option>\n                <option value='Greece'>Greece</option>\n                <option value='Greenland'>Greenland</option>\n                <option value='Grenada'>Grenada</option>\n                <option value='Guadeloupe'>Guadeloupe</option>\n                <option value='Guam'>Guam</option>\n                <option value='Guatemala'>Guatemala</option>\n                <option value='Guinea'>Guinea</option>\n                <option value='Guyana'>Guyana</option>\n                <option value='Haiti'>Haiti</option>\n                <option value='Hawaii'>Hawaii</option>\n                <option value='Honduras'>Honduras</option>\n                <option value='Hong Kong'>Hong Kong</option>\n                <option value='Hungary'>Hungary</option>\n                <option value='Iceland'>Iceland</option>\n                <option value='Indonesia'>Indonesia</option>\n                <option value='India'>India</option>\n                <option value='Iran'>Iran</option>\n                <option value='Iraq'>Iraq</option>\n                <option value='Ireland'>Ireland</option>\n                <option value='Isle of Man'>Isle of Man</option>\n                <option value='Israel'>Israel</option>\n                <option value='Italy'>Italy</option>\n                <option value='Jamaica'>Jamaica</option>\n                <option value='Japan'>Japan</option>\n                <option value='Jordan'>Jordan</option>\n                <option value='Kazakhstan'>Kazakhstan</option>\n                <option value='Kenya'>Kenya</option>\n                <option value='Kiribati'>Kiribati</option>\n                <option value='Korea North'>Korea North</option>\n                <option value='Korea Sout'>Korea South</option>\n                <option value='Kuwait'>Kuwait</option>\n                <option value='Kyrgyzstan'>Kyrgyzstan</option>\n                <option value='Laos'>Laos</option>\n                <option value='Latvia'>Latvia</option>\n                <option value='Lebanon'>Lebanon</option>\n                <option value='Lesotho'>Lesotho</option>\n                <option value='Liberia'>Liberia</option>\n                <option value='Libya'>Libya</option>\n                <option value='Liechtenstein'>Liechtenstein</option>\n                <option value='Lithuania'>Lithuania</option>\n                <option value='Luxembourg'>Luxembourg</option>\n                <option value='Macau'>Macau</option>\n                <option value='Macedonia'>Macedonia</option>\n                <option value='Madagascar'>Madagascar</option>\n                <option value='Malaysia'>Malaysia</option>\n                <option value='Malawi'>Malawi</option>\n                <option value='Maldives'>Maldives</option>\n                <option value='Mali'>Mali</option>\n                <option value='Malta'>Malta</option>\n                <option value='Marshall Islands'>Marshall Islands</option>\n                <option value='Martinique'>Martinique</option>\n                <option value='Mauritania'>Mauritania</option>\n                <option value='Mauritius'>Mauritius</option>\n                <option value='Mayotte'>Mayotte</option>\n                <option value='Mexico'>Mexico</option>\n                <option value='Midway Islands'>Midway Islands</option>\n                <option value='Moldova'>Moldova</option>\n                <option value='Monaco'>Monaco</option>\n                <option value='Mongolia'>Mongolia</option>\n                <option value='Montserrat'>Montserrat</option>\n                <option value='Morocco'>Morocco</option>\n                <option value='Mozambique'>Mozambique</option>\n                <option value='Myanmar'>Myanmar</option>\n                <option value='Nambia'>Nambia</option>\n                <option value='Nauru'>Nauru</option>\n                <option value='Nepal'>Nepal</option>\n                <option value='Netherland Antilles'>Netherland Antilles</option>\n                <option value='Netherlands'>\n                  Netherlands (Holland, Europe)\n                </option>\n                <option value='Nevis'>Nevis</option>\n                <option value='New Caledonia'>New Caledonia</option>\n                <option value='New Zealand'>New Zealand</option>\n                <option value='Nicaragua'>Nicaragua</option>\n                <option value='Niger'>Niger</option>\n                <option value='Nigeria'>Nigeria</option>\n                <option value='Niue'>Niue</option>\n                <option value='Norfolk Island'>Norfolk Island</option>\n                <option value='Norway'>Norway</option>\n                <option value='Oman'>Oman</option>\n                <option value='Pakistan'>Pakistan</option>\n                <option value='Palau Island'>Palau Island</option>\n                <option value='Palestine'>Palestine</option>\n                <option value='Panama'>Panama</option>\n                <option value='Papua New Guinea'>Papua New Guinea</option>\n                <option value='Paraguay'>Paraguay</option>\n                <option value='Peru'>Peru</option>\n                <option value='Phillipines'>Philippines</option>\n                <option value='Pitcairn Island'>Pitcairn Island</option>\n                <option value='Poland'>Poland</option>\n                <option value='Portugal'>Portugal</option>\n                <option value='Puerto Rico'>Puerto Rico</option>\n                <option value='Qatar'>Qatar</option>\n                <option value='Republic of Montenegro'>\n                  Republic of Montenegro\n                </option>\n                <option value='Republic of Serbia'>Republic of Serbia</option>\n                <option value='Reunion'>Reunion</option>\n                <option value='Romania'>Romania</option>\n                <option value='Russia'>Russia</option>\n                <option value='Rwanda'>Rwanda</option>\n                <option value='St Barthelemy'>St Barthelemy</option>\n                <option value='St Eustatius'>St Eustatius</option>\n                <option value='St Helena'>St Helena</option>\n                <option value='St Kitts-Nevis'>St Kitts-Nevis</option>\n                <option value='St Lucia'>St Lucia</option>\n                <option value='St Maarten'>St Maarten</option>\n                <option value='St Pierre & Miquelon'>\n                  St Pierre & Miquelon\n                </option>\n                <option value='St Vincent & Grenadines'>\n                  St Vincent & Grenadines\n                </option>\n                <option value='Saipan'>Saipan</option>\n                <option value='Samoa'>Samoa</option>\n                <option value='Samoa American'>Samoa American</option>\n                <option value='San Marino'>San Marino</option>\n                <option value='Sao Tome & Principe'>Sao Tome & Principe</option>\n                <option value='Saudi Arabia'>Saudi Arabia</option>\n                <option value='Senegal'>Senegal</option>\n                <option value='Seychelles'>Seychelles</option>\n                <option value='Sierra Leone'>Sierra Leone</option>\n                <option value='Singapore'>Singapore</option>\n                <option value='Slovakia'>Slovakia</option>\n                <option value='Slovenia'>Slovenia</option>\n                <option value='Solomon Islands'>Solomon Islands</option>\n                <option value='Somalia'>Somalia</option>\n                <option value='South Africa'>South Africa</option>\n                <option value='Spain'>Spain</option>\n                <option value='Sri Lanka'>Sri Lanka</option>\n                <option value='Sudan'>Sudan</option>\n                <option value='Suriname'>Suriname</option>\n                <option value='Swaziland'>Swaziland</option>\n                <option value='Sweden'>Sweden</option>\n                <option value='Switzerland'>Switzerland</option>\n                <option value='Syria'>Syria</option>\n                <option value='Tahiti'>Tahiti</option>\n                <option value='Taiwan'>Taiwan</option>\n                <option value='Tajikistan'>Tajikistan</option>\n                <option value='Tanzania'>Tanzania</option>\n                <option value='Thailand'>Thailand</option>\n                <option value='Togo'>Togo</option>\n                <option value='Tokelau'>Tokelau</option>\n                <option value='Tonga'>Tonga</option>\n                <option value='Trinidad & Tobago'>Trinidad & Tobago</option>\n                <option value='Tunisia'>Tunisia</option>\n                <option value='Turkey'>Turkey</option>\n                <option value='Turkmenistan'>Turkmenistan</option>\n                <option value='Turks & Caicos Is'>Turks & Caicos Is</option>\n                <option value='Tuvalu'>Tuvalu</option>\n                <option value='Uganda'>Uganda</option>\n                <option value='United Kingdom'>United Kingdom</option>\n                <option value='Ukraine'>Ukraine</option>\n                <option value='United Arab Erimates'>\n                  United Arab Emirates\n                </option>\n                <option value='United States of America'>\n                  United States of America\n                </option>\n                <option value='Uraguay'>Uruguay</option>\n                <option value='Uzbekistan'>Uzbekistan</option>\n                <option value='Vanuatu'>Vanuatu</option>\n                <option value='Vatican City State'>Vatican City State</option>\n                <option value='Venezuela'>Venezuela</option>\n                <option value='Vietnam'>Vietnam</option>\n                <option value='Virgin Islands (Brit)'>\n                  Virgin Islands (Brit)\n                </option>\n                <option value='Virgin Islands (USA)'>\n                  Virgin Islands (USA)\n                </option>\n                <option value='Wake Island'>Wake Island</option>\n                <option value='Wallis & Futana Is'>Wallis & Futana Is</option>\n                <option value='Yemen'>Yemen</option>\n                <option value='Zaire'>Zaire</option>\n                <option value='Zambia'>Zambia</option>\n                <option value='Zimbabwe'>Zimbabwe</option>\n              </Select>\n              <FormHelperText>\n                Since you aren't shipping you item worldwide and to mars, select\n                a country/countries you would be shipping to.\n              </FormHelperText>\n            </FormControl>\n\n            <FormControl\n              id='dd'\n              display={isShippingWorldWide ? 'none' : 'revert'}\n              p='4'\n              mt='8'\n              borderRadius='9px'\n              border='2px dashed #B3C4F9'\n              isRequired\n            >\n              <FormLabel fontWeight='bold' color='secondary.200'>\n                Country/Countries you're shipping to.\n              </FormLabel>\n              {countries.map((item, index) => {\n                return (\n                  <Tag\n                    key={index}\n                    color='#fff'\n                    py='3'\n                    px='5'\n                    fontWeight='bold'\n                    mx='2'\n                    my='1'\n                    bg='signals.success'\n                  >\n                    <TagLabel>{item}</TagLabel>\n                    <TagCloseButton\n                      id={item}\n                      onClick={(e) => {\n                        RemoveCountry(e, item);\n                      }}\n                    />\n                  </Tag>\n                );\n              })}\n              <FormHelperText>\n                {' '}\n                This is list of countries or a country you're willing to ship to{' '}\n              </FormHelperText>\n            </FormControl>\n\n            <Tag\n              cursor='pointer'\n              fontWeight='bold'\n              bg='signals.error'\n              color='#fff'\n              py='4'\n              px='3'\n              mt='7'\n              fontSize='1rem'\n              textTransform='capitalize'\n              display={showImgErr ? 'block' : 'none'}\n            >\n              Please upload an image\n            </Tag>\n            <Button\n              alignItems='center'\n              justifyItems='center'\n              leftIcon={<Icon w={6} h={6} as={BsBoxArrowUp} />}\n              mt='5'\n              type='submit'\n              variant='solid'\n            >\n              Preview and upload\n            </Button>\n          </form>\n        </Box>\n      </Grid>\n\n      <Box display={seePreview ? 'block' : 'none'}>\n        <Box display={isSubmitting ? 'none' : 'block'} py='3' borderRadius='13px' bg='secondary.200' my='4' px='2'>\n          <Flex align='center'>\n            <Button\n              bg='primary.200'\n              py='1'\n              leftIcon={<BiArrowBack />}\n              mr='2'\n              onClick={() => {\n                setSeePreview(false);\n              }}\n            >\n              Go back and Edit\n            </Button>\n            <Text color='white'>\n              Preview- this is what your potential buyer would see. you can go\n              back and edit whatever you want.\n            </Text>\n          </Flex>\n        </Box>\n        <Grid\n          py='4'\n          px='3'\n          borderRadius='9px'\n          border='2px dashed #264ABE'\n          templateColumns='30% 70%'\n          columnGap={6}\n          display={isSubmitting ? 'none' : 'grid'}\n        >\n          <GridItem>\n            <Image src={itemImg} borderRadius='9px' alt={itemData.itemName} />\n          </GridItem>\n          <GridItem>\n            <Tag\n              bg='secondary.200'\n              fontSize='0.9rem'\n              mb={4}\n              py='2'\n              px='2'\n              color='#fff'\n            >\n              <Avatar size='xs' src={itemData.ownerImg}></Avatar>\n              <Text ml='3'>\n                <Flex justify='center' align='center'>\n                  <Link\n                    isExternal\n                    mr='2'\n                    href={`https://github.com/${itemData.owner}`}\n                  >\n                    This item is owned and sold by {itemData.owner}\n                  </Link>{' '}\n                  <FiExternalLink />\n                </Flex>\n              </Text>\n            </Tag>\n            <Heading>{itemData.itemName}</Heading>\n            <Text w='80%' color='neutral.100'>\n              {itemData.metaDesc}\n            </Text>\n            <Text w='80%' mt={6}>\n              {itemData.fullDesc}\n            </Text>\n\n            <Tag\n              bg='#fff'\n              fontWeight='bolder'\n              border='1px solid #082890'\n              fontSize='1.1rem'\n              mt={4}\n              py='2'\n              px='2'\n            >\n              $ {parseInt(itemData.itemPrice) > 0 ? itemData.itemPrice : 'FREE'}\n            </Tag>\n\n            {countries.length <= 0 ? (\n              <Box>\n                <Tag\n                  fontWeight='bold'\n                  bg='secondary.200'\n                  color='#fff'\n                  my='3'\n                  py='2'\n                >\n                  <BiWorld />\n                  <Text ml='1'>This item ships world wide</Text>{' '}\n                </Tag>\n              </Box>\n            ) : (\n              <Box>\n                <Tag\n                  fontWeight='bold'\n                  bg='secondary.200'\n                  color='#fff'\n                  my='3'\n                  py='2'\n                >\n                  <BiWorld />\n                  <Text ml='1'>\n                    This item ships only to this specific countries/regions\n                  </Text>{' '}\n                </Tag>\n                <Box>\n                  {countries.map((item, index) => {\n                    return (\n                      <Tag\n                        key={index}\n                        color='#fff'\n                        py='3'\n                        px='5'\n                        fontWeight='bold'\n                        my='1'\n                        mr='1'\n                        bg='signals.success'\n                      >\n                        <TagLabel>{item}</TagLabel>\n                      </Tag>\n                    );\n                  })}\n                </Box>\n              </Box>\n            )}\n\n            <Button bg='primary.100' my='5' py='6'>\n              Place Order\n            </Button>\n          </GridItem>\n        </Grid>\n        <Box display={!isSubmitting ? 'none' : 'block'} py='4rem' px='3' bg='secondary.200' borderRadius='10px' my='5'>\n          <Grid templateColumns='1fr 7fr' columnGap='2em'>\n            <GridItem>\n              { \n                !itemUploadFinish ? \n                <CircularProgress \n                isIndeterminate \n                size='80px' \n                thickness='4px'\n                color='primary.100'\n              />\n              : \n              <Icon h='130px' w='130px' color='#C6F6D5' as={GiCheckeredFlag} />\n              }\n              \n            </GridItem>\n            <GridItem >\n              <Box mb='3'>\n                <Code p='2' fontSize='1rem' display='fit-content' colorScheme='green'>{\n                  itemUploadFinish ? '//-YAY- SUCCESS!' : '//Please be patient- we are processing this'\n                }</Code>\n              </Box>\n              <Box>\n                <Code>\n                  { \n                    itemUploadFinish ? 'Your item has been successfully added to devebay and other developers can see it and place orders for it!' : `Your item is being uploaded- we are using firebase so relax- this wouldn't take too long.`\n                  }\n                </Code>\n              </Box>\n              <Button display={itemUploadFinish ? 'flex' : 'none'} onClick={onCopy}  bg='primary.100' py='0.8rem' mt='4' leftIcon={<AiOutlineLink/>}>{hasCopied ? 'Copied' : `Copy your item's link `}</Button>\n            </GridItem>\n          </Grid>\n        </Box>\n        <Box \n          py='3' \n          borderRadius='13px' \n          bg='secondary.200'\n          my='4'\n          px='2'\n          display={isSubmitting ? 'none' : 'block'}\n        >\n            <Flex align='center'>\n              <Button \n                isLoading={isSubmitting}\n                bg='primary.200' \n                py='1'\n                rightIcon={<CgArrowRightO h='6'/>}\n                mr='2'\n                onClick={!isSubmitting ? pushItemToFirebase : () => {}}\n              >\n                Publish\n              </Button>\n              <Text color='white'>Finally! your item would be listed on devebay right away and potenial buyers can see your item</Text>\n            </Flex>\n        </Box>\n      </Box>\n    </Page>\n  )\n}\n\nexport default Upload;\n",["74","75"],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/index.js",["76"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ChakraProvider} from '@chakra-ui/react';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport theme from './theme';\nimport {BrowserRouter} from 'react-router-dom'\nimport {CookiesProvider} from 'react-cookie';\n\nReactDOM.render(\n  <ChakraProvider theme={theme} colorModeManager>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n","/Users/jamesakpan/Documents/workingIdeas/devebay/src/firebase.js",[],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/LoggedIn.js",["77","78","79","80","81","82","83","84","85","86","87"],"import React, { useEffect } from 'react';\nimport Page from '../Components/Page';\nimport { \n  Box,\n  Heading,\n  Flex,\n  Text,\n  Button,\n  Tooltip,\n  Image,\n  Tag,\n  Spacer,\n  Grid\n} from '@chakra-ui/react';\nimport {AiOutlineGithub} from 'react-icons/ai';\nimport {BiCrown} from 'react-icons/bi';\nimport DetailCard from '../Components/DetailCard';\nimport helpIcon from '../Assets/helpp.svg';\nimport {firestore, auth} from '../firebase';\nimport rockHand from '../Assets/rockhand.png';\nimport {CgScrollV} from 'react-icons/cg';\nimport ItemCard from '../Components/ItemCard';\n\n\nconst LoggedIn = () => { \n\n  //hooks \n  let [lastFetched, setLastFetched] = React.useState('');\n  let [topThreeItems, setTopThreeItems] = React.useState([]);\n  let [allItems, setAllItems] = React.useState([]);\n  let [allowGetMore, setAllowGetMore] = React.useState(false);\n  let [userData, setUserData] = React.useState();\n  let [isEa,setIsEa] = React.useState(false);\n  let [totalItems, setTotalItems] = React.useState();\n\n\n  //firebase  here \n  let itemsRef = firestore\n    .collection('items')\n    .orderBy('date', 'desc')\n\n  \n  auth().onAuthStateChanged(user => {\n    let userEmail = '';\n    if(user) { \n      setUserData(user)\n      userEmail = user.email;\n      firestore.collection('users')\n      .get()\n      .then((res) => {\n        res.docs.forEach((item) => {\n          if(userEmail ===  item.data().email) { \n            setIsEa(true);\n          }\n        })\n      })\n    }\n  })\n\n  useEffect(() => {\n    let topThreeArr = [];\n    let allArr = [];\n    let lastItem = ''\n\n    itemsRef.get()\n    .then(d => {setTotalItems(d.size)})\n\n    itemsRef\n    .limit(3)\n    .get()\n    .then(snapShot => {\n      setLastFetched(snapShot.docs[snapShot.docs.length-1]);\n      snapShot.forEach(item => { \n        topThreeArr.push(item.data());\n        setAllowGetMore(true);\n      })\n      setTopThreeItems([...topThreeArr]);\n    })\n  }, [])\n\n  useEffect(() => { \n    let allArr = [];\n    if(allowGetMore) { \n    itemsRef\n      .startAfter(lastFetched)\n      .limit(3)\n      .get()\n      .then(snapShot => {\n        setLastFetched(snapShot.docs[snapShot.docs.length-1]);\n        snapShot.forEach(item => { \n          allArr.push(item.data())\n        });\n        setAllItems([...allArr]);\n      })\n    }\n  }, [allowGetMore])\n\n  const getMoreData = () => {\n    let allArr = []; \n    console.log(allItems.length)\n    if(allItems.length + topThreeItems.length < totalItems) {\n      console.log('yeah') \n      itemsRef\n      .startAfter(lastFetched)\n      .limit(3)\n      .get()\n      .then(snapShot => {\n        setLastFetched(snapShot.docs[snapShot.docs.length-1]);\n        snapShot.forEach(item => { \n          allArr.push(item.data())\n        });\n        setAllItems([...allItems, ...allArr]);\n      })\n    }\n    else { \n      console.log('end here')\n    }\n  }\n\n  return ( \n    <Page>\n      <Flex p='8' bg='primary.100' borderRadius='13px'>\n        <Box w='80%'>\n          <Flex w='fit-content'>\n            <Tag \n              fontWeight='bold' \n              bg='primary.300' \n              color='#fff'\n              p='2'\n              mb='10'\n              textTransform='capitalize'\n              mr='4'\n            >\n              Hey {`${userData ? userData.displayName.split(' ')[0] : 'user'}`}\n            </Tag>\n            <Spacer />\n            <Tag\n              fontWeight='bold' \n              bg='primary.300' \n              color='#fff'\n              p='2'\n              fontSize='1.7rem'\n              mb='10'\n              textTransform='capitalize'\n              display={isEa ? 'inline-block' : 'none'}\n            >\n              👑\n            </Tag>\n          </Flex>\n          <Heading mb='10' fontSize='60px' color='#fff'>\n            What would you buy <br/> from  a Developer today?\n          </Heading>\n          <Button \n            color='#fff' \n            bg='secondary.200'  \n            leftIcon={<CgScrollV size='26'/>} \n            variant='hugeButton'\n          >\n            Scroll to find out\n          </Button>\n        </Box>\n        <Box>\n          <Image w='170px' mt='-110%' src={rockHand} />\n        </Box>\n      </Flex>\n\n      <Flex \n        borderRadius='14px' \n        p='4' \n        align='center' \n        bg='secondary.200'\n        mt='8'\n        display={isEa ? 'flex' : 'none'}\n      >\n        <Tag\n          fontWeight='bold' \n          bg='secondary.300' \n          color='#fff'\n          p='2'\n          fontSize='1.7rem'\n          textTransform='capitalize'\n          mr='5'\n        >\n          ✨\n        </Tag>\n        <Text fontWeight='bold' color='#fff'>\n          Welcome Early Adopter- Please upload an item to help us grow.\n        </Text>\n        <Spacer />\n        <Button variant='dashedColored' bg='secondary.300'>UPLOAD</Button>\n      </Flex>\n\n      <Box \n        p='6'\n        borderRadius='14px'  \n        bg='primary.500' \n        border='2px dashed #5168B4'\n        mt='10'\n        position='relative'\n      > \n        <Flex \n          border='5px solid #F3F6FE'\n          position='absolute'\n          top='0'\n          p='2' \n          align='center' \n          bg='primary.100' \n          w='fit-content'\n          borderRadius='13px'\n          transform='translateY(-50%)'\n        >\n          <Tag mr='4' p='2'>🔥</Tag> \n          <Text \n            fontSize='lg' \n            color='#fff' \n            fontWeight='bold'\n          >\n            Latest 3 Items\n          </Text>\n        </Flex>\n        <Grid mt='10' templateColumns='1fr 1fr 1fr' rowGap={10} columnGap={3}>\n          { \n            topThreeItems.map((item, index) => {\n              return ( \n                <ItemCard \n                  key={index}\n                  views={item.view}\n                  imageSrc={item.itemImg}\n                  itemName={item.name}\n                  itemDesc={item.fullDesc}\n                  id={item.id}\n                  price={item.price.toLocaleString()}\n                  views={item.views}\n                />\n              )\n            })\n          }\n        </Grid>\n      </Box>\n      <Box \n        p='6'\n        pb='20'\n        borderRadius='14px'  \n        bg='primary.500' \n        border='2px dashed #5168B4'\n        mt='10'\n        position='relative'\n      > \n        <Flex \n          border='5px solid #F3F6FE'\n          position='absolute'\n          top='0'\n          p='2' \n          align='center' \n          bg='primary.100' \n          w='fit-content'\n          borderRadius='13px'\n          transform='translateY(-50%)'\n        >\n          <Tag mr='4' p='2'>🔥</Tag> \n          <Text \n            fontSize='lg' \n            color='#fff' \n            fontWeight='bold'\n          >\n            All Items\n          </Text>\n        </Flex>\n        <Grid mt='10' templateColumns='1fr 1fr 1fr' rowGap={10} columnGap={3}>\n          {  \n            allItems.length > 0 ? allItems.map((item, index) => {\n              return ( \n                <ItemCard \n                  key={index}\n                  views={item.view}\n                  imageSrc={item.itemImg}\n                  itemName={item.name}\n                  itemDesc={item.fullDesc}\n                  id={item.id}\n                  price={item.price.toLocaleString()}\n                  views={item.views}\n                />\n              )\n            })  : 'No items yet'\n          }\n        </Grid>\n        <Flex \n          cursor='pointer'\n          border='5px solid #F3F6FE'\n          position='absolute'\n          top='100%'\n          p='2' \n          px='4'\n          align='center' \n          bg='primary.100' \n          w='fit-content'\n          borderRadius='13px'\n          transform='translateY(-50%)'\n          left='45%'\n          onClick={getMoreData}\n        > \n          <Text \n            fontSize='lg' \n            color='#fff' \n            fontWeight='bold'\n          >\n            {\n              allItems.length + topThreeItems.length < totalItems ? 'Load More' : 'End of list'\n            }\n          </Text>\n        </Flex>\n      </Box>\n    </Page>\n  )\n}\n\nexport default LoggedIn;","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/Navbar.js",["88"],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/Page.js",[],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/theme.js",[],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/UserPage.js",["89","90","91","92","93","94","95"],"import React, {useEffect, useState} from 'react';\nimport {useParams} from 'react-router-dom';\nimport {firestore, auth} from '../firebase';\nimport Page from '../Components/Page';\nimport { \n  Grid, \n  GridItem,\n  Box,\n  Text,\n  Heading,\n  Icon,\n  Tabs,\n  Tab,\n  TabPanels,\n  TabList,\n  TabPanel,\n  Button,\n  Image,\n  Link as Chlink,\n  useClipboard\n} from '@chakra-ui/react';\nimport {CopyIcon} from '@chakra-ui/icons'\n\nconst UserPage = () => {\n\n\n  //hooks state and variables\n  let [receivedOrders, setReceiverOrders] = useState([]);\n  let [userItems, setUserItems] = useState();\n  let [orderedList, setOrderList] = useState([]);\n  let [userData, setUserData] = useState();\n  let [isEarlyAdopter, setIsEarlyAdopter] = useState(false);\n\n  let username = useParams().username;\n  console.log(username)\n\n  //fucntions\n\n\n  //components\n  const Items = (data) => {\n    let [itemid, setItemId] = useState(`http://${window.location.host}/i/${data.data.id}`);\n    const { hasCopied, onCopy } = useClipboard(itemid);\n    return ( \n      <Box \n        m='3' \n        border='1px dashed #010B28'\n        px='3'\n        py='4'\n        borderRadius='20px'\n      >\n        <Grid templateColumns='auto 8fr'>\n          <GridItem mr='3'>\n            <Box \n              bg={`url(${data.data.itemImg})`}  \n              bgPosition='center'\n              bgSize='cover'\n              w='100px'\n              h='100px'\n              boxShadow='0px 11px 8px 6px #a2a5ad36'\n              borderRadius='12px'\n            ></Box>\n          </GridItem>\n          <GridItem>\n            <Heading fontSize='1.4rem'>{data.data.name}</Heading>\n            <Text fontSize='0.8rem' color='neutral.200'>{data.data.metaDesc}</Text>\n            <Text mt={5} color='secondary.200'>{data.data.fullDesc}</Text>\n            <Button \n              mt={3} \n              onClick={onCopy}\n              leftIcon={<CopyIcon />}\n              p='2' \n              bg='primary.100'  \n              fontSize='0.9rem'\n              _hover={{border: '1px solid transparent'}}\n            >\n              {hasCopied ? 'Copied!' : 'Copy Link'}\n            </Button>\n          </GridItem>\n        </Grid>\n      </Box>\n    )\n  }\n\n  const ReceivedItems = (data) => {\n\n    return ( \n      <Box \n        m='3' \n        border='1px dashed #010B28'\n        px='3'\n        py='4'\n        borderRadius='20px'\n      >\n        <Grid templateColumns='auto 8fr'>\n          <GridItem mr='3'>\n            <Box \n              bg={`url(${data.data.itemImg})`}  \n              bgPosition='center'\n              bgSize='cover'\n              w='100px'\n              h='100px'\n              boxShadow='0px 11px 8px 6px #a2a5ad36'\n              borderRadius='12px'\n            ></Box>\n          </GridItem>\n          <GridItem>\n          <Heading fontSize='1.4rem'>{data.data.itemName}</Heading>\n            <Text fontSize='1rem' mt={1}>{`Your item was ordered by ${data.data.orderedBy}. You are provided with their email to contact them and continue the transaction`}</Text>\n            <Button \n              mt={3} \n              p='1' \n              bg='primary.100'  \n              fontSize='0.9rem'\n              _hover={{border: '1px solid transparent'}}\n            >\n              <Chlink href={`mailto:${data.data.buyerEmail}`} target='_blank'>{`Send ${data.data.orderedBy} an email`}</Chlink>\n            </Button>\n          </GridItem>\n        </Grid>\n      </Box>\n    )\n  }\n\n  //hooks effects\n  useEffect(() => { \n    let mounted = true;\n    auth().onAuthStateChanged((user) => {\n      if(user) { \n        let itemsArr = [];\n        let receivedordersArr = [];\n        setUserData({username: username, userimg: user.photoURL})\n        firestore.collection('items')\n        .where('ownerData.owner', '==', username)\n        .get()\n        .then((res) => {\n          res.forEach((item) => { \n            itemsArr.push(item.data());\n            if(item.data().order.length > 0) { \n              receivedordersArr.push({orderedBy: item.data().order[0].name, buyerId: item.data().order[0].uid, itemName: item.data().name, itemImg: item.data().itemImg, buyerEmail: item.data().order[0].buyerEmail , itemId: item.data().id})\n\n            }\n          });\n          setReceiverOrders(receivedordersArr);\n          setUserItems(itemsArr);\n        })\n      }\n    })\n\n    if(username) { \n      firestore.collection('users')\n      .where('username', '==', username)\n      .get()\n      .then((res) => {\n        res.forEach((item) => {\n          setIsEarlyAdopter(item.data().earlyAdopter)\n        })\n      })\n    }\n\n  }, [])\n\n  return ( \n    <Page>\n      {\n        userData \n        ? \n          <Grid templateColumns='3fr 5fr'>\n            <GridItem>\n              <Heading fontSize='1.3rem' color='neutral.200'>Your profile.</Heading>\n              <Image \n                mt='4'\n                boxSize='300px'\n                borderRadius='30px'\n                boxShadow='0px 0px 3px 4px #a2a5ad36'\n                src={userData.userimg} \n                alt={userData.username} \n              />\n              <Text mt='3'>\n                <Chlink href={`github.com/${userData.username}`}>{`@${userData.username}`}</Chlink>\n              </Text>\n            </GridItem>\n            <GridItem>\n              <Tabs variant='soft-rounded' colorScheme='blue'>\n                <TabList>\n                  <Tab>Your Items</Tab>\n                  <Tab>Received Orders</Tab> \n                  <Tab>Place Orders</Tab>\n                </TabList>\n\n                <TabPanels mt='5'>\n                  <TabPanel>\n                    <Heading fontSize='1.3rem'>Your Items 🍀</Heading>\n                    { \n                      userItems ? userItems.map((item, index) => { \n                        return ( \n                          <Items \n                            data={item}\n                            key={index}\n                          />\n                        )\n                      }) : ''\n                    }\n                  </TabPanel>\n\n                  <TabPanel>\n                    <Heading fontSize='1.3rem'>Received Orders 📦</Heading>\n                    { \n                      receivedOrders ? receivedOrders.map((item, index) => {\n                        return ( \n                          <ReceivedItems \n                            key={index}\n                            data={item}\n                          />\n                        )\n                      }) : ''\n                    }\n                  </TabPanel>\n\n                  <TabPanel >\n                    <Heading fontSize='1.3rem'>Coming soon 🤞🏽</Heading>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n            </GridItem>\n          </Grid>\n          : \n          'wait please'\n      }\n    </Page>\n  )\n}\n\nexport default UserPage;",["96","97"],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/Footer.js",["98","99"],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/DetailCard.js",["100"],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/IndividualItem.js",["101","102","103","104","105","106","107","108"],"import React, { useEffect, useState } from 'react';\nimport Page from '../Components/Page';\nimport { \n  Box,\n  Heading,\n  Flex,\n  Text,\n  Button,\n  Tooltip,\n  Image,\n  Tag,\n  Spacer,\n  Grid,\n  Avatar,\n  GridItem,\n  Link,\n  TagLabel,\n  NumberIncrementStepper,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure\n\n} from '@chakra-ui/react';\nimport {useParams} from 'react-router-dom';\nimport loadingImg from '../Assets/loadingItem.png';\nimport  firebase, {auth, firestore} from '../firebase';\nimport {BiWorld} from 'react-icons/bi';\nimport {FiExternalLink} from 'react-icons/fi';\n\nconst IndividualItem = (userData) => {\n  //hook state and variables\n  let productId = useParams().productId;\n  let date = new Date(parseInt(useParams().productId)).toLocaleDateString();\n  let [itemData, setItemData] = React.useState();\n  let [isOwner, setIsOwner] = React.useState();\n  let [orderComplete, setOrderComplete] = React.useState(false);\n  let [userOrders, setUserOrders] = React.useState([]);\n  let [previouslyOrdered, setPreviouslyOrdered] = React.useState();\n  const {isOpen, onOpen, onClose} = useDisclosure();\n  console.log(useParams().productId);\n  let uid;\n  let userName;\n  let email;\n\n  //functions\n  const checkpreviousOrders = () => {\n    \n  }\n  const processOrder = () => {  \n    firestore.collection('items')\n    .doc(productId)\n    .update({ \n      order: firebase.firestore.FieldValue.arrayUnion({uid: uid, name: userName, buyerEmail: email})\n    }).then(() => {\n      firestore.collection('users')\n      .where('uid', '==', uid)\n      .get()\n      .then((res) => {\n        res.forEach(item => {\n          item.ref.update({\n            orderPlaced: firebase.firestore.FieldValue.arrayUnion({itemId: productId})\n          })\n          .then(() => {setOrderComplete(true)})\n        })\n      })\n    })\n  }\n\n\n  useEffect(() => {\n    auth().onAuthStateChanged((user) => {\n      if(user) { \n        let orderList = [];\n        firestore.collection('users')\n        .where('uid' , '==', uid)\n        .get()\n        .then(doc => {\n          doc.forEach((item) => {\n            console.log(item.data())\n            item.data().orderPlaced.forEach(item => {\n              orderList.push(item.itemId)\n            })\n          })\n          setUserOrders(orderList)\n        })\n\n        userOrders.indexOf(productId) !== -1 ? setPreviouslyOrdered(true) : setPreviouslyOrdered(false)\n\n      }\n    })\n  }, [uid])\n\n\n  //tiny components\n  const InitialState = () => {\n    return ( \n      <Box>\n        <Grid templateColumns='1fr 1fr' columnGap={4}> \n          <Image src={loadingImg} />\n          <Box>\n            <Box \n              h='40px' \n              w='80%' \n              bg='primary.200' \n            > \n\n            </Box>\n            <Box mt='3'> \n              <Box \n                h='7px' \n                w='50%' \n                bg='primary.300' \n                mt='1'\n              > \n\n              </Box>\n              <Box \n                h='7px' \n                w='70%' \n                bg='primary.300' \n                mt='1'\n              > \n\n              </Box>\n              <Box \n                h='7px' \n                w='70%' \n                bg='primary.300' \n                mt='1'\n              > \n\n              </Box>\n            </Box>\n\n            <Box mt='12'> \n              <Box \n                h='7px' \n                w='75%' \n                bg='primary.300' \n                mt='1'\n              > \n              </Box>\n              <Box \n                h='7px' \n                w='75%' \n                bg='primary.300' \n                mt='1'\n              > \n              </Box>\n              <Box \n                h='7px' \n                w='75%' \n                bg='primary.300' \n                mt='1'\n              > \n              </Box>\n              <Box \n                h='7px' \n                w='75%' \n                bg='primary.300' \n                mt='1'\n              > \n              </Box>\n              <Box \n                h='7px' \n                w='75%' \n                bg='primary.300' \n                mt='1'\n              > \n              </Box>\n              <Box \n                h='7px' \n                w='75%' \n                bg='primary.300' \n                mt='1'\n              > \n              </Box>\n\n            </Box>\n\n            <Grid \n              w='30%' \n              templateColumns='1fr 1fr' \n              mt={10}\n              columnGap={3}\n            >\n              <Box \n                h='40px' \n                w='100%' \n                bg='primary.200' \n              > \n              </Box>\n              <Box \n                h='40px' \n                w='100%' \n                bg='primary.200' \n              > \n\n              </Box>\n            </Grid>\n            <Box \n              mt={5}\n              h='60px' \n              w='70%' \n              bg='secondary.200' \n              > \n            </Box>\n          </Box>\n        </Grid>\n      </Box>\n    )\n  };\n\n  auth().onAuthStateChanged((user) => {\n    if(user) { \n      uid = user.uid;\n      userName = user.displayName;\n      email = user.email;\n    }\n  });\n\n  //firebase\n  useEffect(() => { \n    let mounted = true;\n\n    //add the list of orderitems by the current user\n\n\n    \n    //increase views for items if it isn't viewed by it's owner\n    firestore.collection('items')\n    .doc(productId)\n    .get()\n    .then(res => {\n      if(res.data().ownerData.ownerId !== uid) { \n\n        setIsOwner(false)\n        firestore.collection('items')\n        .doc(productId)\n        .update({ \n          views: firebase.firestore.FieldValue.increment(1)\n        })\n      }\n      else { \n        setIsOwner(true)\n      }\n    })\n\n    let itemObj = [];\n    firestore.collection('items')\n    .where('id', '==',  parseInt(productId))\n    .get()\n    .then(d => { \n      if(mounted) { \n        d.docs.forEach(item => { \n          if(mounted) { \n            itemObj.push(item.data());\n          }\n        });\n        setItemData(itemObj[0]);\n      }\n    })\n\n    return () => mounted = false;\n  }, [])\n\n  return ( \n    <Page>\n      { \n        !itemData\n        ? \n          <InitialState />\n        : \n        <Box>\n          <Grid\n            py='4'\n            px='3'\n            borderRadius='9px'\n            templateColumns='30% 70%'\n            columnGap={6}\n          >\n            <GridItem>\n              <Image src={itemData.itemImg} borderRadius='9px' alt={itemData.name} />\n            </GridItem>\n            <GridItem>\n              <Text mb='1' color='neutral.200'>Date added: {date}</Text>\n              <Tag\n                bg='secondary.200'\n                fontSize='0.9rem'\n                mb={4}\n                py='2'\n                px='2'\n                color='#fff'\n              >\n                <Avatar size='xs' src={itemData.ownerData.ownerImg}></Avatar>\n                <Text ml='3'>\n                  <Flex justify='center' align='center'>\n                    <Link\n                      isExternal\n                      mr='2'\n                      href={`https://github.com/${itemData.ownerData.owner}`}\n                    >\n                      This item is owned and sold by {itemData.ownerData.owner}\n                    </Link>{' '}\n                    <FiExternalLink />\n                  </Flex>\n                </Text>\n              </Tag>\n              <Heading>{itemData.name}</Heading>\n              <Text w='80%' color='neutral.100'>\n                {itemData.metaDesc}\n              </Text>\n              <Text w='80%' mt={6}>\n                {itemData.fullDesc}\n              </Text>\n\n              <Tag\n                bg='#fff'\n                fontWeight='bolder'\n                border='1px solid #082890'\n                fontSize='1.1rem'\n                mt={4}\n                py='2'\n                px='2'\n              >\n                $ {parseInt(itemData.price) > 0 ? itemData.price.toLocaleString() : 'FREE'}\n              </Tag>\n\n              {itemData.countries ===  'none' ? (\n                <Box>\n                  <Tag\n                    fontWeight='bold'\n                    bg='secondary.200'\n                    color='#fff'\n                    my='3'\n                    py='2'\n                  >\n                    <BiWorld />\n                    <Text ml='1'>This item ships world wide</Text>{' '}\n                  </Tag>\n                </Box>\n              ) : (\n                <Box>\n                  <Tag\n                    fontWeight='bold'\n                    bg='secondary.200'\n                    color='#fff'\n                    my='3'\n                    py='2'\n                  >\n                    <BiWorld />\n                    <Text ml='1'>\n                      This item ships only to this specific countries/regions\n                    </Text>{' '}\n                  </Tag>\n                  <Box>\n                    {itemData.countries !==  'none' ? itemData.countries.map((item, index) => {\n                      return (\n                        <Tag\n                          key={index}\n                          color='#fff'\n                          py='3'\n                          px='5'\n                          fontWeight='bold'\n                          my='1'\n                          mr='1'\n                          bg='signals.success'\n                        >\n                          <TagLabel>{item}</TagLabel>\n                        </Tag>\n                      );\n                    }) : ''}\n                  </Box>\n                </Box>\n              )}\n              { \n                orderComplete ? \n                <Button bg='primary.100' my='5' py='6'>Your Order has been received</Button> \n                : \n                isOwner ? <Button bg='primary.100' my='5' py='6'>You can't order your own item 😉</Button> : \n                <Button onClick={userOrders.indexOf(productId) !== -1 ? () => {} : onOpen} bg='primary.100' my='5' py='6'>\n                { \n                  userOrders.indexOf(productId) !== -1 ? \n                  `You've already placed an order for this item` : `Place Order `\n                }\n              </Button>\n              }\n              <Modal \n                size='xl' \n                isOpen={isOpen} \n                onClose={onClose}\n                motionPreset=\"slideInBottom\"\n              >\n                  <ModalOverlay />\n                  <ModalContent>\n                    <ModalHeader>\n                      {orderComplete ? '🔥 Your order has been sent' : 'Do you want to plan an order for this item?'}\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                      { \n                        orderComplete ? \n                        <Text> {itemData.ownerData.owner ? itemData.ownerData.owner : ''} would reach our to you if they accept your order</Text>\n                        : \n                        <Text>If you place this order and it's accepted by the Developer who is selling this item they'll receive your email and contact to complete the sale.</Text>\n                      }\n                    </ModalBody>\n                    <ModalFooter>\n                      <Button variant='error' mr='3' onClick={onClose}>{orderComplete ? 'Close' : 'No, Cancel'}</Button>\n                      <Button  onClick={processOrder} display={orderComplete ? 'none' : 'inline-flex'} >Yes, Proceed to order</Button>\n                    </ModalFooter>\n                  </ModalContent>\n              </Modal>\n            </GridItem>\n          </Grid>\n      </Box>\n      }\n    </Page>\n  )\n}\n\nexport default IndividualItem;","/Users/jamesakpan/Documents/workingIdeas/devebay/src/Pages/NLoggedin.js",["109","110"],"/Users/jamesakpan/Documents/workingIdeas/devebay/src/Components/ItemCard.js",["111","112"],{"ruleId":"113","severity":1,"message":"114","line":2,"column":3,"nodeType":"115","messageId":"116","endLine":2,"endColumn":6},{"ruleId":"113","severity":1,"message":"117","line":6,"column":8,"nodeType":"115","messageId":"116","endLine":6,"endColumn":12},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"113","severity":1,"message":"122","line":30,"column":9,"nodeType":"115","messageId":"116","endLine":30,"endColumn":17},{"ruleId":"113","severity":1,"message":"123","line":34,"column":8,"nodeType":"115","messageId":"116","endLine":34,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":77,"column":6,"nodeType":"126","endLine":77,"endColumn":8,"suggestions":"127"},{"ruleId":"118","replacedBy":"128"},{"ruleId":"120","replacedBy":"129"},{"ruleId":"113","severity":1,"message":"130","line":8,"column":9,"nodeType":"115","messageId":"116","endLine":8,"endColumn":24},{"ruleId":"113","severity":1,"message":"131","line":9,"column":3,"nodeType":"115","messageId":"116","endLine":9,"endColumn":10},{"ruleId":"113","severity":1,"message":"132","line":15,"column":9,"nodeType":"115","messageId":"116","endLine":15,"endColumn":24},{"ruleId":"113","severity":1,"message":"133","line":16,"column":9,"nodeType":"115","messageId":"116","endLine":16,"endColumn":16},{"ruleId":"113","severity":1,"message":"134","line":17,"column":8,"nodeType":"115","messageId":"116","endLine":17,"endColumn":18},{"ruleId":"113","severity":1,"message":"135","line":18,"column":8,"nodeType":"115","messageId":"116","endLine":18,"endColumn":16},{"ruleId":"113","severity":1,"message":"136","line":62,"column":9,"nodeType":"115","messageId":"116","endLine":62,"endColumn":15},{"ruleId":"113","severity":1,"message":"137","line":63,"column":9,"nodeType":"115","messageId":"116","endLine":63,"endColumn":17},{"ruleId":"124","severity":1,"message":"138","line":79,"column":6,"nodeType":"126","endLine":79,"endColumn":8,"suggestions":"139"},{"ruleId":"124","severity":1,"message":"140","line":96,"column":6,"nodeType":"126","endLine":96,"endColumn":20,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":233,"column":19,"nodeType":"144","endLine":233,"endColumn":37},{"ruleId":"142","severity":1,"message":"143","line":281,"column":19,"nodeType":"144","endLine":281,"endColumn":37},{"ruleId":"113","severity":1,"message":"145","line":11,"column":9,"nodeType":"115","messageId":"116","endLine":11,"endColumn":24},{"ruleId":"113","severity":1,"message":"146","line":11,"column":3,"nodeType":"115","messageId":"116","endLine":11,"endColumn":7},{"ruleId":"113","severity":1,"message":"147","line":30,"column":8,"nodeType":"115","messageId":"116","endLine":30,"endColumn":19},{"ruleId":"113","severity":1,"message":"148","line":30,"column":21,"nodeType":"115","messageId":"116","endLine":30,"endColumn":33},{"ruleId":"113","severity":1,"message":"149","line":32,"column":8,"nodeType":"115","messageId":"116","endLine":32,"endColumn":22},{"ruleId":"113","severity":1,"message":"150","line":42,"column":18,"nodeType":"115","messageId":"116","endLine":42,"endColumn":27},{"ruleId":"113","severity":1,"message":"151","line":127,"column":9,"nodeType":"115","messageId":"116","endLine":127,"endColumn":16},{"ruleId":"124","severity":1,"message":"152","line":161,"column":6,"nodeType":"126","endLine":161,"endColumn":8,"suggestions":"153"},{"ruleId":"118","replacedBy":"154"},{"ruleId":"120","replacedBy":"155"},{"ruleId":"113","severity":1,"message":"156","line":4,"column":3,"nodeType":"115","messageId":"116","endLine":4,"endColumn":7},{"ruleId":"113","severity":1,"message":"157","line":7,"column":3,"nodeType":"115","messageId":"116","endLine":7,"endColumn":7},{"ruleId":"142","severity":1,"message":"143","line":22,"column":48,"nodeType":"144","endLine":22,"endColumn":65},{"ruleId":"113","severity":1,"message":"158","line":1,"column":28,"nodeType":"115","messageId":"116","endLine":1,"endColumn":36},{"ruleId":"113","severity":1,"message":"131","line":9,"column":3,"nodeType":"115","messageId":"116","endLine":9,"endColumn":10},{"ruleId":"113","severity":1,"message":"159","line":12,"column":3,"nodeType":"115","messageId":"116","endLine":12,"endColumn":9},{"ruleId":"113","severity":1,"message":"160","line":18,"column":3,"nodeType":"115","messageId":"116","endLine":18,"endColumn":25},{"ruleId":"113","severity":1,"message":"161","line":43,"column":8,"nodeType":"115","messageId":"116","endLine":43,"endColumn":25},{"ruleId":"113","severity":1,"message":"162","line":51,"column":9,"nodeType":"115","messageId":"116","endLine":51,"endColumn":28},{"ruleId":"124","severity":1,"message":"163","line":96,"column":6,"nodeType":"126","endLine":96,"endColumn":11,"suggestions":"164"},{"ruleId":"124","severity":1,"message":"165","line":270,"column":6,"nodeType":"126","endLine":270,"endColumn":8,"suggestions":"166"},{"ruleId":"113","severity":1,"message":"132","line":14,"column":9,"nodeType":"115","messageId":"116","endLine":14,"endColumn":24},{"ruleId":"113","severity":1,"message":"167","line":19,"column":9,"nodeType":"115","messageId":"116","endLine":19,"endColumn":19},{"ruleId":"113","severity":1,"message":"168","line":3,"column":3,"nodeType":"115","messageId":"116","endLine":3,"endColumn":9},{"ruleId":"113","severity":1,"message":"169","line":5,"column":3,"nodeType":"115","messageId":"116","endLine":5,"endColumn":8},"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Page' is defined but never used.","no-native-reassign",["170"],"no-negated-in-lhs",["171"],"'Redirect' is defined but never used.","'firebase' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'itemData' and 'userCredentials'. Either include them or remove the dependency array. You can also do a functional update 'setUserCredentials(u => ...)' if you only need 'userCredentials' in the 'setUserCredentials' call.","ArrayExpression",["172"],["170"],["171"],"'CookiesProvider' is defined but never used.","'Tooltip' is defined but never used.","'AiOutlineGithub' is defined but never used.","'BiCrown' is defined but never used.","'DetailCard' is defined but never used.","'helpIcon' is defined but never used.","'allArr' is assigned a value but never used.","'lastItem' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'itemsRef'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has missing dependencies: 'itemsRef' and 'lastFetched'. Either include them or remove the dependency array.",["174"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'ChevronDownIcon' is defined but never used.","'Icon' is defined but never used.","'orderedList' is assigned a value but never used.","'setOrderList' is assigned a value but never used.","'isEarlyAdopter' is assigned a value but never used.","'setItemId' is assigned a value but never used.","'mounted' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["175"],["170"],["171"],"'Grid' is defined but never used.","'Text' is defined but never used.","'useState' is defined but never used.","'Spacer' is defined but never used.","'NumberIncrementStepper' is defined but never used.","'previouslyOrdered' is assigned a value but never used.","'checkpreviousOrders' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'productId' and 'userOrders'. Either include them or remove the dependency array.",["176"],"React Hook useEffect has missing dependencies: 'productId' and 'uid'. Either include them or remove the dependency array.",["177"],"'useCookies' is defined but never used.","'Center' is defined but never used.","'Image' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [itemData, userCredentials]",{"range":"190","text":"191"},"Update the dependencies array to be: [itemsRef]",{"range":"192","text":"193"},"Update the dependencies array to be: [allowGetMore, itemsRef, lastFetched]",{"range":"194","text":"195"},"Update the dependencies array to be: [username]",{"range":"196","text":"197"},"Update the dependencies array to be: [productId, uid, userOrders]",{"range":"198","text":"199"},"Update the dependencies array to be: [productId, uid]",{"range":"200","text":"201"},[1820,1822],"[itemData, userCredentials]",[1904,1906],"[itemsRef]",[2274,2288],"[allowGetMore, itemsRef, lastFetched]",[4545,4547],"[username]",[2462,2467],"[productId, uid, userOrders]",[6113,6115],"[productId, uid]"]